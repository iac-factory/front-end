{"version":3,"file":"jest.config.js","sourceRoot":"","sources":["../jest.config.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;;AAEH,oDAAoB;AAEpB,kBAAe;IACX,oEAAoE;IACpE,QAAQ,EAAE,KAAK;IAEf,wCAAwC;IACxC,IAAI,EAAE,CAAC;IAEP,0EAA0E;IAC1E,wBAAwB;IAExB,kEAAkE;IAClE,UAAU,EAAE,IAAI;IAEhB,0FAA0F;IAC1F,eAAe,EAAE,IAAI;IAErB,yGAAyG;IACzG,kCAAkC;IAElC,4DAA4D;IAC5D,iBAAiB,EAAE,UAAU;IAE7B,sEAAsE;IACtE,gCAAgC;IAChC,UAAU;IACV,KAAK;IAEL,0EAA0E;IAC1E,gBAAgB,EAAE,IAAI;IAEtB,wEAAwE;IACxE,iBAAiB,EAAE;QACf,MAAM;QACN,MAAM;QACN,MAAM;QACN,MAAM;QACN,QAAQ;KACX;IAED,+EAA+E;IAC/E,gCAAgC;IAEhC,0CAA0C;IAC1C,mBAAmB,EAAE,SAAS;IAE9B,4DAA4D;IAC5D,iBAAiB,EAAE,IAAI;IAEvB,+EAA+E;IAC/E,kBAAkB,EAAE,EAAE;IAEtB,mGAAmG;IACnG,WAAW,EAAE,SAAS;IAEtB,kGAAkG;IAClG,cAAc,EAAE,SAAS;IAEzB,+EAA+E;IAC/E,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,QAAQ;IACR,KAAK;IAEL,iOAAiO;IACjO,UAAU,EAAE,YAAE,CAAC,IAAI,EAAE,CAAC,MAAM;IAE5B,iGAAiG;IACjG,iBAAiB,EAAE;QACf,cAAc;KACjB;IAED,+CAA+C;IAC/C,oBAAoB,EAAE,CAAE,IAAI,CAAE;IAE9B,oIAAoI;IACpI,gBAAgB,EAAE;QACd,0BAA0B,EAAE,IAAI;KACnC;IACD,SAAS,EAAE,6CAA6C;IACxD,sBAAsB,EAAE;QACpB,UAAU;QACV,gBAAgB;KACnB;IAED,wHAAwH;IACxH,wBAAwB,EAAE,EAAE;IAE5B,2CAA2C;IAC3C,MAAM,EAAE,KAAK;IAEb,sEAAsE;IACtE,UAAU,EAAE,OAAO;IAEnB,sCAAsC;IACtC,QAAQ,EAAE,SAAS;IAEnB,gEAAgE;IAChE,SAAS,EAAE,SAAS;IAEpB,oDAAoD;IACpD,UAAU,EAAE,KAAK;IAEjB,gEAAgE;IAChE,YAAY,EAAE,IAAI;IAElB,8BAA8B;IAC9B,QAAQ,EAAE,SAAS;IAEnB,sDAAsD;IACtD,YAAY,EAAE,KAAK;IAEnB,wEAAwE;IACxE,OAAO,EAAE,SAAS;IAElB,6EAA6E;IAC7E,KAAK,EAAE;QACH,WAAW;KACd;IAED,0EAA0E;IAC1E,MAAM,EAAE,aAAa;IAErB,0GAA0G;IAC1G,UAAU,EAAE;QACR,oBAAoB;KACvB;IAED,8GAA8G;IAC9G,kBAAkB,EAAE,EAAE;IAEtB,sGAAsG;IACtG,iBAAiB,EAAE,EAAE;IAErB,sFAAsF;IACtF,mBAAmB,EAAE,EAAE;IAEvB,qDAAqD;IACrD,eAAe,EAAE,MAAM;IAEvB,qDAAqD;IACrD,sBAAsB,EAAE,EAAE;IAE1B,wCAAwC;IACxC,qBAAqB,EAAE,KAAK;IAE5B,eAAe;IACf,kCAAkC;IAClC,KAAK;IAEL,sBAAsB,EAAE,EAAE;IAE1B,2DAA2D;IAC3D,oBAAoB,EAAE,SAAS;IAE/B,iDAAiD;IACjD,UAAU,EAAE,SAAS;IAErB,0DAA0D;IAC1D,SAAS,EAAE,EAAE;IAEb,2EAA2E;IAC3E,OAAO,EAAE,IAAI;IAEb,mHAAmH;IACnH,uBAAuB,EAAE,EAAE;IAE3B,4CAA4C;IAC5C,QAAQ,EAAE,IAAI;CACjB,CAAC","sourcesContent":["/*\n * BSD 3-Clause License\n *\n * Copyright Â© 2022, Jacob B. Sanders, IaC-Factory & Affiliates\n *\n * All Rights Reserved\n */\n\nimport OS from \"os\";\n\nexport default {\n    // All imported modules in your tests should be mocked automatically\n    automock: false,\n\n    // Stop running tests after `n` failures\n    bail: 0,\n\n    // The directory where Jest should store its cached dependency information\n    // cacheDirectory: null,\n\n    // Automatically clear mock calls and instances between every test\n    clearMocks: true,\n\n    // Indicates whether the coverage information should be collected while executing the test\n    collectCoverage: true,\n\n    // An array of glob patterns indicating a set of files for which coverage information should be collected\n    // collectCoverageFrom: undefined,\n\n    // The directory where Jest should output its coverage files\n    coverageDirectory: \"coverage\",\n\n    // An array of regexp pattern strings used to skip coverage collection\n    // coveragePathIgnorePatterns: [\n    //     \"$\"\n    // ],\n\n    // Indicates which provider should be used to instrument code for coverage\n    coverageProvider: \"v8\",\n\n    // A list of reporter names that Jest uses when writing coverage reports\n    coverageReporters: [\n        \"json\",\n        \"text\",\n        \"html\",\n        \"lcov\",\n        \"clover\"\n    ],\n\n    // An object that configures minimum threshold enforcement for coverage results\n    // coverageThreshold: undefined,\n\n    // A path to a custom dependency extractor\n    dependencyExtractor: undefined,\n\n    // Make calling deprecated APIs throw helpful error messages\n    errorOnDeprecated: true,\n\n    // Force coverage collection from ignored files using an array of glob patterns\n    forceCoverageMatch: [],\n\n    // A path to a module which exports an async function that is triggered once before all test suites\n    globalSetup: undefined,\n\n    // A path to a module which exports an async function that is triggered once after all test suites\n    globalTeardown: undefined,\n\n    // A set of global variables that need to be available in all test environments\n    // globals: {\n    //     \"ts-jest\": {\n    //         useESM: true\n    //     }\n    // },\n\n    // The maximum amount of workers used to run your tests. Can be specified as % or a number. E.g. maxWorkers: 10% will use 10% of your CPU amount + 1 as the maximum worker number. maxWorkers: 2 will use a maximum of 2 workers.\n    maxWorkers: OS.cpus().length,\n\n    // An array of directory names to be searched recursively up from the requiring module's location\n    moduleDirectories: [\n        \"node_modules\"\n    ],\n\n    // An array of file extensions your modules use\n    moduleFileExtensions: [ \"js\" ],\n\n    // A map from regular expressions to module names or to arrays of module names that allow to stub out resources with a single module\n    moduleNameMapper: {\n        \"^(\\\\.{1,2}/.*)\\\\.test.js\": \"$1\"\n    },\n    testRegex: \"./(unit-testing/.*|(\\\\.|/)(test|spec))\\\\.js\",\n    testPathIgnorePatterns: [\n        \"index.js\",\n        \"/node_modules/\"\n    ],\n\n    // An array of regexp pattern strings, matched against all module paths before considered 'visible' to the module loader\n    modulePathIgnorePatterns: [],\n\n    // Activates notifications for test results\n    notify: false,\n\n    // An enum that specifies notification mode. Requires { notify: true }\n    notifyMode: \"never\",\n\n    // Run tests from one or more projects\n    projects: undefined,\n\n    // Use this configuration option to add custom reporters to Jest\n    reporters: undefined,\n\n    // Automatically reset mock state between every test\n    resetMocks: false,\n\n    // Reset the module registry before running each individual test\n    resetModules: true,\n\n    // A path to a custom resolver\n    resolver: undefined,\n\n    // Automatically restore mock state between every test\n    restoreMocks: false,\n\n    // The root directory that Jest should scan for tests and modules within\n    rootDir: undefined,\n\n    // A list of paths to directories that Jest should use to search for files in\n    roots: [\n        \"<rootDir>\"\n    ],\n\n    // Allows you to use a custom runner instead of Jest's default test runner\n    runner: \"jest-runner\",\n\n    // The paths to modules that run some code to configure or set up the testing environment before each test\n    setupFiles: [\n        \"<rootDir>/setup.js\"\n    ],\n\n    // A list of paths to modules that run some code to configure or set up the testing framework before each test\n    setupFilesAfterEnv: [],\n\n    // The number of seconds after which a test is considered as slow and reported as such in the results.\n    slowTestThreshold: 15,\n\n    // A list of paths to snapshot serializer modules Jest should use for snapshot testing\n    snapshotSerializers: [],\n\n    // The test environment that will be used for testing\n    testEnvironment: \"node\",\n\n    // Options that will be passed to the testEnvironment\n    testEnvironmentOptions: {},\n\n    // Adds a location field to test results\n    testLocationInResults: false,\n\n    // testMatch: [\n    //     \"**/unit-testing/*.test.js\"\n    // ],\n\n    extensionsToTreatAsEsm: [],\n\n    // This option allows the use of a custom results processor\n    testResultsProcessor: undefined,\n\n    // This option allows use of a custom test runner\n    testRunner: undefined,\n\n    // A map from regular expressions to paths to transformers\n    transform: {},\n\n    // Indicates whether each individual test should be reported during the run\n    verbose: true,\n\n    // An array of regexp patterns that are matched against all source file paths before re-running tests in watch mode\n    watchPathIgnorePatterns: [],\n\n    // Whether to use watchman for file crawling\n    watchman: true\n};\n"]}